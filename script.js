document.addEventListener('DOMContentLoaded', function() {
    const tg = window.Telegram.WebApp;
    tg.expand();

    const userId = tg.initDataUnsafe?.user?.id;
    const username = tg.initDataUnsafe?.user?.username;

    if (!userId || !username) {
        console.error('Unable to retrieve user data');
        return;
    }

    console.log('User ID:', userId);
    console.log('Username:', username);

    let score = 0;
    let addRugPullClicked = false;
    let achievementsUnlocked = [];
    let clickUpgradeLevel = 0;
    let clickUpgradeCost = 100;
    let clickCount = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    function saveUserData() {
        const data = {
            score,
            addRugPullClicked,
            achievementsUnlocked,
            clickUpgradeLevel,
            clickUpgradeCost
        };

        fetch('/.netlify/functions/saveUserData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, username, data })
        })
            .then(response => response.json())
            .then(data => {
                console.log('Server response:', data);
            })
            .catch(error => {
                console.error('Error sending data to server:', error);
            });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    function loadUserData() {
        fetch(`/.netlify/functions/loadUserData?userId=${userId}`)
            .then(response => response.json())
            .then(data => {
                const storedData = data.data;
                console.log('Data loaded from server:', storedData);
                if (storedData) {
                    score = storedData.score !== undefined ? storedData.score : 0;
                    addRugPullClicked = storedData.addRugPullClicked !== undefined ? storedData.addRugPullClicked : false;
                    achievementsUnlocked = storedData.achievementsUnlocked !== undefined ? storedData.achievementsUnlocked : [];
                    clickUpgradeLevel = storedData.clickUpgradeLevel !== undefined ? storedData.clickUpgradeLevel : 0;
                    clickUpgradeCost = storedData.clickUpgradeCost !== undefined ? storedData.clickUpgradeCost : 100;
                    console.log('Data applied from server');
                    updateScoreDisplay();
                    updateUpgradeButton();
                    loadAchievements();
                    checkScoreOnLoad();
                }
            })
            .catch(error => {
                console.error('Error loading data from server:', error);
            });
    }

    const clickButton = document.getElementById('clickButton');
    const upgradeButton = document.getElementById('upgradeButton');
    const upgradeClickButton = document.getElementById('upgradeClickButton');
    const rugPullButton = document.getElementById('rugPullButton');
    const hookahButton = document.getElementById('hookahButton');
    const amaButton = document.getElementById('amaButton');
    const sadButton = document.getElementById('sadButton');
    const scoreDisplay = document.getElementById('score');
    const hint = document.getElementById('hint');
    const notification = document.getElementById('notification');
    const gameImage = document.getElementById('gameImage');
    const achievementsButton = document.getElementById('achievementsButton');
    const resetButton = document.getElementById('resetButton');
    const resetButtonText = document.getElementById('resetButtonText');
    const addToHomeScreenButton = document.getElementById('addToHomeScreenButton');
    const achievementsModal = document.getElementById('achievementsModal');
    const achievementList = document.getElementById('achievementList');
    const achievementNotificationModal = document.getElementById('achievementNotificationModal');
    const achievementNotificationText = document.getElementById('achievementNotificationText');
    const achievementImage = document.getElementById('achievementImage');
    const hintNotificationModal = document.getElementById('hintNotificationModal');
    const hintNotificationText = document.getElementById('hintNotificationText');
    const notificationModal = document.getElementById('notificationModal');
    const notificationText = document.getElementById('notificationText');
    const upgradeModal = document.getElementById('upgradeModal');
    const clickSound = document.getElementById('clickSound');
    const achievementSound = document.getElementById('achievementSound');

    scoreDisplay.textContent = `$${score}`;

    function updateScoreDisplay() {
        scoreDisplay.textContent = `$${score}`;
    }

    function updateUpgradeButton() {
        upgradeClickButton.textContent = `–ë–æ–ª—å—à–µ üíµ –∑–∞ –∫–ª–∏–∫ ($${clickUpgradeCost})`;
        // hookahButton.textContent = `üí© –ó–∞–±–∏—Ç—å –∫–∞–ª—å—è–Ω ($${clickUpgradeCost})`;
        // amaButton.textContent = `ü§° –ü—Ä–æ–≤–µ—Å—Ç–∏ AMA —Å–µ—Å—Å–∏—é ($${clickUpgradeCost})`;
        // sadButton.textContent = `‚òπÔ∏è –ü–æ–≥—Ä—É—Å—Ç–∏—Ç—å ($${clickUpgradeCost})`;
    }

    function closeUpgradeModal() {
        upgradeModal.style.display = 'none';
    }

    clickButton.addEventListener('click', function() {
        score += 1 + clickUpgradeLevel; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º score –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏
        updateScoreDisplay();
        clickCount++;
        if (clickCount >= 10) {
            saveUserData();
            clickCount = 0;
        }
        checkScore();
        checkAchievements();
        playClickSound();
        showScoreIncrement();
    });

    gameImage.addEventListener('click', function() {
        score += 1 + clickUpgradeLevel; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º score –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏
        updateScoreDisplay();
        clickCount++;
        if (clickCount >= 10) {
            saveUserData();
            clickCount = 0;
        }
        checkScore();
        checkAchievements();
        playClickSound();
        showScoreIncrement();
    });

    achievementsButton.addEventListener('click', function() {
        achievementsModal.style.display = 'block';
    });

    resetButton.addEventListener('click', function() {
        if (score >= 10) {
            score = Math.round(score * 0.1); // –û—Ç–Ω–∏–º–∞–µ–º 90% –æ—á–∫–æ–≤
            updateScoreDisplay();
            addAchievement('reset', '–°–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É!');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –°–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É!');
            achievementSound.play();
            addRugPullClicked = false;
            resetButton.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É resetButton
            resetButtonText.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É resetButtonText
            saveUserData();
        } else {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!');
        }
    });

    addToHomeScreenButton.addEventListener('click', function() {
        if (window.Telegram.WebApp.initDataUnsafe) {
            const tg = window.Telegram.WebApp;
            tg.addToHomeScreen();
        }
    });

    upgradeButton.addEventListener('click', function() {
        upgradeModal.style.display = 'block';
    });

    upgradeClickButton.addEventListener('click', function() {
        upgradeClick();
        closeUpgradeModal();
    });

    rugPullButton.addEventListener('click', function() {
        if (!addRugPullClicked) {
            score += 100000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å Rug Pull –¥–æ 100000
            updateScoreDisplay();
            addRugPullClicked = true;
            gameImage.src = '2.png'; // –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 2.png
            addAchievement('rug_pull', 'üêî –ü–æ—Å—Ç—É–ø–æ–∫ –ø–µ—Ç—É—à–∞—Ä—ã. –°–¥–µ–ª–∞—Ç—å RUG PULL!');
            showAchievementNotification('üêî –ü–æ—Å—Ç—É–ø–æ–∫ –ø–µ—Ç—É—à–∞—Ä—ã. –°–¥–µ–ª–∞—Ç—å RUG PULL!', 'rug_pull_image.webp');
            achievementSound.play();
            closeUpgradeModal();
            saveUserData();
            resetButton.style.display = 'inline'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É resetButton
            resetButtonText.style.display = 'block'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É resetButtonText
        } else {
            closeUpgradeModal();
            showNotification('–¢—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å RUG PULL –≤ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ. –¢–µ–±—è –∏–∑–≥–Ω–∞–ª–∏! –ò–¥–∏ –Ω–∞ —Ö—É–π! üñïüñïüñï');
            showNotification('–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å RUG PULL –µ—â–µ —Ä–∞–∑');
        }
    });

    function getRandomEffect() {
        const randomValue = Math.random();
        if (randomValue < 0.25) {
            // 25% chance for a positive effect
            return Math.floor(Math.random() * 10001); // Random value between 0 and 10000
        } else {
            // 75% chance for a negative effect
            return -Math.floor(Math.random() * 5001); // Random value between -10000 and 0
        }
    }

    hookahButton.addEventListener('click', function() {
        const effect = getRandomEffect();
        score += effect;
        updateScoreDisplay();
        showNotification(`–¢—ã –∑–∞–±–∏–ª –∫–∞–ª—å—è–Ω –∏ —Ä–∞—Å—Å–ª–∞–±–∏–ª—Å—è. ${effect >= 0 ? '+' : ''}${effect} $!`);
        saveUserData();
    });

    amaButton.addEventListener('click', function() {
        const effect = getRandomEffect();
        score += effect;
        updateScoreDisplay();
        showNotification(`–¢—ã –ø—Ä–æ–≤–µ–ª AMA —Å–µ—Å—Å–∏—é –∏ ${effect >= 0 ? '–ø–æ–ª—É—á–∏–ª' : '–ø–æ—Ç–µ—Ä—è–ª'} ${effect >= 0 ? '+' : ''}${effect} $!`);
        saveUserData();
    });

    sadButton.addEventListener('click', function() {
        const effect = getRandomEffect();
        score += effect;
        updateScoreDisplay();
        showNotification(`–¢—ã –ø–æ–≥—Ä—É—Å—Ç–∏–ª –∏ ${effect >= 0 ? '–ø–æ–ª—É—á–∏–ª' : '–ø–æ—Ç–µ—Ä—è–ª'} –º–æ—Ç–∏–≤–∞—Ü–∏—é. ${effect >= 0 ? '+' : ''}${effect} $!`);
        saveUserData();
    });

    function checkScore() {
        if (score >= 100000) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Rug Pull
            rugPullButton.style.display = 'block';
            if (hint) {
                hint.style.display = 'none';
            }
        }
        else {
            rugPullButton.style.display = 'none';
        }

        if (score >= 200000) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gameImage.src = '2.png'; // –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 2.png
        }
    }

    function checkAchievements() {
        if (score >= 1000 && !achievementsUnlocked.includes('1000')) {
            addAchievement('1000', '–ë–æ–º–∂. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $1000');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –ë–æ–º–∂. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $1000');
            achievementSound.play();
        }
        if (score >= 5000 && !achievementsUnlocked.includes('5000')) {
            addAchievement('5000', '–ù–∏—â–∏–π. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $5000');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –ù–∏—â–∏–π. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $5000');
            achievementSound.play();
        }
        if (score >= 10000 && !achievementsUnlocked.includes('10000')) {
            addAchievement('10000', '–ë–µ–¥–Ω—è–∫. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $10000');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –ë–µ–¥–Ω—è–∫. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $10000');
            achievementSound.play();
        }
        if (score >= 50000 && !achievementsUnlocked.includes('50000')) {
            addAchievement('50000', '–†–∞–±–æ—á–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $50000');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –†–∞–±–æ—á–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $50000');
            achievementSound.play();
        }
        if (score >= 100000 && !achievementsUnlocked.includes('100000')) {
            addAchievement('100000', '–°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $100000. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - "Rug pull"!');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: –°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $100000. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - "Rug pull"!');
            achievementSound.play();
        }
        if (score >= 2000000 && !achievementsUnlocked.includes('2000000')) {
            addAchievement('2000000', '–î—É—Ä–∞—á–µ–∫');
            showAchievementNotification('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞—á–∏–≤–∫–∞: "–î—É—Ä–∞—á–µ–∫". –•–≤–∞—Ç–∏—Ç —Ç—ã–∫–∞—Ç—å, –ø–∏–∑–¥—É–π –Ω–∞ –∑–∞–≤–æ–¥!');
            achievementSound.play();
        }
    }

    function addAchievement(key, text) {
        if (!achievementsUnlocked.includes(key)) {
            const achievementItem = document.createElement('li');
            achievementItem.textContent = text;
            achievementList.appendChild(achievementItem);
            achievementsUnlocked.push(key);
            saveUserData();
        }
    }

    function showAchievementNotification(text, imageSrc = '') {
        achievementNotificationText.textContent = text;
        if (imageSrc) {
            achievementImage.src = imageSrc;
            achievementImage.style.display = 'block';
        } else {
            achievementImage.style.display = 'none';
        }
        achievementNotificationModal.style.display = 'block';
    }

    function showHintNotification(text) {
        hintNotificationText.textContent = text;
        hintNotificationModal.style.display = 'block';
    }

    function showNotification(text) {
        notificationText.textContent = text;
        notificationModal.style.display = 'block';
    }

    function playClickSound() {
        clickSound.pause();
        clickSound.currentTime = 0;
        clickSound.play();
    }

    function showScoreIncrement() {
        const scoreIncrement = document.createElement('span');
        scoreIncrement.textContent = `+${1 + clickUpgradeLevel}üíµ`;
        scoreIncrement.style.marginLeft = '10px';
        scoreIncrement.style.position = 'absolute';
        scoreIncrement.style.fontSize = '20px';
        scoreIncrement.style.color = 'green';
        scoreIncrement.style.transition = 'opacity 0.5s, transform 0.5s';
        scoreIncrement.style.opacity = '0';
        scoreIncrement.style.transform = 'translateY(-20px)';
        scoreDisplay.appendChild(scoreIncrement);

        setTimeout(() => {
            scoreIncrement.style.opacity = '1';
            scoreIncrement.style.transform = 'translateY(0)';
        }, 10);

        setTimeout(() => {
            scoreIncrement.style.opacity = '0';
            scoreIncrement.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                if (scoreDisplay.contains(scoreIncrement)) {
                    scoreDisplay.removeChild(scoreIncrement);
                }
            }, 500);
        }, 1000);
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—á–∏–≤–∫–∏
    function loadAchievements() {
        const achievements = {
            '1000': '–ë–æ–º–∂. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $10',
            '5000': '–ù–∏—â–∏–π. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $500',
            '10000': '–ë–µ–¥–Ω—è–∫. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $1000',
            '50000': '–†–∞–±–æ—á–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $5000',
            '100000': '–°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å. –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $10000',
            'rug_pull': 'üêî –ü–æ—Å—Ç—É–ø–æ–∫ –ø–µ—Ç—É—à–∞—Ä—ã. –°–¥–µ–ª–∞—Ç—å RUG PULL!',
            '2000000': '–î—É—Ä–∞—á–µ–∫'
        };
        if (achievementsUnlocked && Array.isArray(achievementsUnlocked)) {
            achievementsUnlocked.forEach(key => {
                if (achievements[key]) {
                    const achievementItem = document.createElement('li');
                    achievementItem.textContent = achievements[key];
                    achievementList.appendChild(achievementItem);
                }
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function checkScoreOnLoad() {
        if (score >= 100000) {
            rugPullButton.style.display = 'block';
            if (hint) {
                hint.style.display = 'none';
            }
        }
        else {
            rugPullButton.style.display = 'none';
        }

        if (score >= 200000) {
            gameImage.src = '2.png'; // –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 2.png
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –∫–ª–∏–∫–∞
    function upgradeClick() {
        if (score >= clickUpgradeCost) {
            score -= clickUpgradeCost;
            clickUpgradeLevel++;
            clickUpgradeCost = Math.round(clickUpgradeCost * 1.25); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞ 1.25
            updateScoreDisplay();
            updateUpgradeButton();
            showNotification(`–ö–ª–∏–∫ –ø—Ä–æ–∫–∞—á–∞–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${clickUpgradeLevel}!`);
            saveUserData();
        } else {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –∫–ª–∏–∫–∞!');
        }
    }

    loadAchievements();
    checkScoreOnLoad();
    updateUpgradeButton();

    // Close the modal when the user clicks on <span> (x)
    document.querySelectorAll('.close').forEach(closeButton => {
        closeButton.addEventListener('click', function() {
            this.parentElement.parentElement.style.display = 'none';
        });
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    window.addEventListener('beforeunload', saveUserData);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    loadUserData();
});
